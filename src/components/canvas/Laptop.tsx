'use client'

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import React, { Suspense, useRef, useState } from 'react'
import { Center, useGLTF, Html, OrbitControls, PresentationControls, Float } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { PortableText } from '@portabletext/react'
import * as THREE from 'three'

export default function Laptop({ projects }) {
  const [currentProject, setCurrentProject] = useState<number>(0)
  const laptop = useRef<THREE.Group>()
  const descriptionContainer = useRef<THREE.Group>()
  const textContainer = useRef<THREE.Mesh>()
  const { nodes, materials } = useGLTF(
    'https://vazxmixjsiawhamofees.supabase.co/storage/v1/object/public/models/macbook/model.gltf',
  ) as any

  const link = projects[currentProject].link
  const nextButton = useRef<THREE.Mesh>()
  const prevButton = useRef<THREE.Mesh>()

  return (
    <>
      <PresentationControls zoom={-2}>
        <group ref={laptop} dispose={null} position={[-1.5, -1, 0]} rotation-y={Math.PI / 4} scale={0.1}>
          <group position={[0, 0.52, 0]}>
            <mesh geometry={nodes.Circle001.geometry} material={nodes.Circle001.material} />
            <mesh geometry={nodes.Circle001_1.geometry} material={nodes.Circle001_1.material} />
            <mesh geometry={nodes.Circle001_2.geometry} material={materials.HeadPhoneHole} />
            <mesh geometry={nodes.Circle001_3.geometry} material={nodes.Circle001_3.material} />
            <mesh geometry={nodes.Circle001_4.geometry} material={nodes.Circle001_4.material} />
            <mesh geometry={nodes.Circle001_5.geometry} material={materials.TouchbarBorder} />
            <mesh geometry={nodes.Circle001_6.geometry} material={materials.Keyboard} />
            <mesh
              geometry={nodes.FrontCameraRing001.geometry}
              material={materials['CameraRIngBlack.002']}
              position={[-0.15, 19.57, -16.15]}
              scale={5.8}
            />
            <mesh
              geometry={nodes.KeyboardKeyHole.geometry}
              material={nodes.KeyboardKeyHole.material}
              position={[-11.79, -0.15, -8.3]}
              scale={5.8}
            />
            <mesh
              geometry={nodes.RubberFoot.geometry}
              material={materials.DarkRubber}
              position={[-11.95, -0.75, 7.86]}
              scale={5.8}
            />
            <group position={[0.01, -0.21, -10.56]} scale={5.8}>
              <mesh geometry={nodes.Circle012.geometry} material={materials.HingeBlack} />
              <mesh geometry={nodes.Circle012_1.geometry} material={materials.HingeMetal} />
            </group>
            <group position={[0, -0.51, 0]} scale={5.8}>
              <mesh geometry={nodes.Circle006.geometry} material={nodes.Circle006.material} />
              <mesh geometry={nodes.Circle006_1.geometry} material={nodes.Circle006_1.material} />
            </group>
            <group position={[-11.79, -0.15, -8.3]} scale={5.8}>
              <mesh geometry={nodes.Circle.geometry} material={nodes.Circle.material} />
              <mesh geometry={nodes.Circle_1.geometry} material={materials.Key} />
              <mesh geometry={nodes.Circle_2.geometry} material={materials.Touchbar} />
            </group>
            <group position={[0.01, -0.47, -10.41]} rotation={[1.31, 0, 0]} scale={5.8}>
              <mesh geometry={nodes.Circle002.geometry} material={nodes.Circle002.material} />
              <mesh geometry={nodes.Circle002_1.geometry} material={materials.Screen}>
                <Html
                  rotation-x={-Math.PI / 2}
                  position={[0.05, -0.06, -1.95]}
                  parent={nodes.Circle002_1}
                  scale={0.5}
                  occlude='blending'
                  transform
                >
                  <div
                    style={{
                      height: '100%',
                      width: '100%',
                      maxWidth: '208px',
                      maxHeight: '125px',
                      overflow: 'hidden',
                      scale: 2,
                    }}
                  >
                    <iframe
                      title='embed'
                      style={{
                        width: '1300px',
                        height: '800px',
                        scale: '0.156',
                        transformOrigin: 'top left',
                        userSelect: 'none',
                      }}
                      frameBorder='0'
                      src={link}
                    ></iframe>
                  </div>
                </Html>
              </mesh>
              <mesh geometry={nodes.Circle002_2.geometry} material={materials.ScreenGlass} />
              <mesh geometry={nodes.Circle002_3.geometry} material={materials.Rubber} />
              <mesh geometry={nodes.Circle002_4.geometry} material={materials.DisplayGlass} />
              <mesh
                geometry={nodes.AppleLogo000.geometry}
                material={materials['AppleLogo.004']}
                position={[0, -0.11, -1.8]}
                rotation={[-Math.PI, 0, -Math.PI]}
                scale={[0.58, 0.58, 0.58]}
              />
            </group>
            <group position={[12.2, 0.03, 0.6]} scale={5.8}>
              <mesh geometry={nodes.Circle003.geometry} material={nodes.Circle003.material} />
              <mesh geometry={nodes.Circle003_1.geometry} material={nodes.Circle003_1.material} />
            </group>
            <group position={[-15.03, 0.03, 0.6]} scale={5.8}>
              <mesh geometry={nodes.Circle009.geometry} material={nodes.Circle009.material} />
              <mesh geometry={nodes.Circle009_1.geometry} material={nodes.Circle009_1.material} />
            </group>
          </group>
        </group>
      </PresentationControls>

      <group ref={descriptionContainer}>
        <Float>
          <mesh position={[3, 0, -5]} ref={textContainer} scale={0.5}>
            <meshBasicMaterial color='red' opacity={0.7} />
            <planeBufferGeometry args={[10, 10]} />
            <Html
              rotation={[0, Math.PI * 2, 0]}
              transform
              parent={textContainer.current}
              center
              position-z={0.1}
              castShadow
              receiveShadow
            >
              <div
                style={{
                  width: '12rem',
                  height: '12rem',
                  overflowY: 'scroll',
                  fontSize: '.5rem',
                  color: 'white',
                  fontFamily: 'Helvetica',
                  scale: '2',
                }}
              >
                <PortableText value={projects[currentProject].description} />
              </div>
            </Html>
          </mesh>
          <group position={[0, -1, 0]}>
            <mesh position={[1, 0, 0]} ref={prevButton}>
              <circleGeometry args={[0.5, 32]} />
              <meshBasicMaterial color='white' />
              <Html transform parent={prevButton.current} center position-z={0.1} castShadow receiveShadow>
                <button
                  onClick={() => {
                    setCurrentProject(currentProject - 1)
                    if (currentProject === 0) {
                      setCurrentProject(projects.length - 1)
                    }
                  }}
                >
                  prev
                </button>
              </Html>
            </mesh>
            <mesh position={[3, 0, 0]} ref={nextButton}>
              <circleGeometry args={[0.5, 32]} />
              <meshBasicMaterial color='white' />
              <Html transform parent={nextButton.current} center position-z={0.1} castShadow receiveShadow>
                <button
                onClick={()=>{
                  setCurrentProject(currentProject + 1)
                  if (currentProject === projects.length - 1) {
                    setCurrentProject(0)
                  }
                }}
                >next</button>
              </Html>
            </mesh>
          </group>
        </Float>
      </group>
    </>
  )
}
