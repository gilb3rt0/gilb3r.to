'use client'

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import React, { Suspense, useRef, useState } from 'react'
import { Center, useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import * as THREE from 'three'
import { Html, OrbitControls } from '@react-three/drei'

export default function Laptop({ projects }) {
  const [currentProject, setCurrentProject] = useState<number>(0)
  const group = useRef<THREE.Group>()
  const { nodes, materials } = useGLTF(
    'https://vazxmixjsiawhamofees.supabase.co/storage/v1/object/public/models/macbook/model.gltf',
  ) as any

  const link = projects[currentProject].link
  return (
    <group ref={group} dispose={null} position={[-1.5, 0, 0]} rotation-y={Math.PI / 4}>
      <Center>
        <OrbitControls enableZoom={false} enablePan={false} />
        <group position={[0, 0.52, 0]} scale={[0.1, 0.1, 0.1]}>
          <mesh geometry={nodes.Circle001.geometry} material={nodes.Circle001.material} />
          <mesh geometry={nodes.Circle001_1.geometry} material={nodes.Circle001_1.material} />
          <mesh geometry={nodes.Circle001_2.geometry} material={materials.HeadPhoneHole} />
          <mesh geometry={nodes.Circle001_3.geometry} material={nodes.Circle001_3.material} />
          <mesh geometry={nodes.Circle001_4.geometry} material={nodes.Circle001_4.material} />
          <mesh geometry={nodes.Circle001_5.geometry} material={materials.TouchbarBorder} />
          <mesh geometry={nodes.Circle001_6.geometry} material={materials.Keyboard} />
          <mesh
            geometry={nodes.FrontCameraRing001.geometry}
            material={materials['CameraRIngBlack.002']}
            position={[-0.15, 19.57, -16.15]}
            scale={5.8}
          />
          <mesh
            geometry={nodes.KeyboardKeyHole.geometry}
            material={nodes.KeyboardKeyHole.material}
            position={[-11.79, -0.15, -8.3]}
            scale={5.8}
          />
          <mesh
            geometry={nodes.RubberFoot.geometry}
            material={materials.DarkRubber}
            position={[-11.95, -0.75, 7.86]}
            scale={5.8}
          />
          <group position={[0.01, -0.21, -10.56]} scale={5.8}>
            <mesh geometry={nodes.Circle012.geometry} material={materials.HingeBlack} />
            <mesh geometry={nodes.Circle012_1.geometry} material={materials.HingeMetal} />
          </group>
          <group position={[0, -0.51, 0]} scale={5.8}>
            <mesh geometry={nodes.Circle006.geometry} material={nodes.Circle006.material} />
            <mesh geometry={nodes.Circle006_1.geometry} material={nodes.Circle006_1.material} />
          </group>
          <group position={[-11.79, -0.15, -8.3]} scale={5.8}>
            <mesh geometry={nodes.Circle.geometry} material={nodes.Circle.material} />
            <mesh geometry={nodes.Circle_1.geometry} material={materials.Key} />
            <mesh geometry={nodes.Circle_2.geometry} material={materials.Touchbar} />
          </group>
          <group position={[0.01, -0.47, -10.41]} rotation={[1.31, 0, 0]} scale={5.8}>
            <mesh geometry={nodes.Circle002.geometry} material={nodes.Circle002.material} />
            <mesh geometry={nodes.Circle002_1.geometry} material={materials.Screen}>
              <Html
                className='content'
                rotation-x={-Math.PI / 2}
                position={[0.05, -0.06, -1.95]}
                transform
                occlude
                parent={nodes.Circle002_1}
              >
                <div
                  style={{
                    height: '100%',
                    width: '100%',
                    maxWidth: '208px',
                    maxHeight: '125px',
                    overflow: 'hidden',
                  }}
                >
                  <iframe
                    style={{
                      width: '1300px',
                      height: '800px',
                      scale: '0.156',
                      transformOrigin: 'top left',
                      userSelect: 'none',
                    }}
                    src={link}
                  ></iframe>
                </div>
              </Html>
            </mesh>
            <mesh geometry={nodes.Circle002_2.geometry} material={materials.ScreenGlass} />
            <mesh geometry={nodes.Circle002_3.geometry} material={materials.Rubber} />
            <mesh geometry={nodes.Circle002_4.geometry} material={materials.DisplayGlass} />
            <mesh
              geometry={nodes.AppleLogo000.geometry}
              material={materials['AppleLogo.004']}
              position={[0, -0.11, -1.8]}
              rotation={[-Math.PI, 0, -Math.PI]}
              scale={[0.58, 0.58, 0.58]}
            />
          </group>
          <group position={[12.2, 0.03, 0.6]} scale={5.8}>
            <mesh geometry={nodes.Circle003.geometry} material={nodes.Circle003.material} />
            <mesh geometry={nodes.Circle003_1.geometry} material={nodes.Circle003_1.material} />
          </group>
          <group position={[-15.03, 0.03, 0.6]} scale={5.8}>
            <mesh geometry={nodes.Circle009.geometry} material={nodes.Circle009.material} />
            <mesh geometry={nodes.Circle009_1.geometry} material={nodes.Circle009_1.material} />
          </group>
        </group>
      </Center>
    </group>
  )
}

// export default function Laptop(props) {
//   const group = useRef<THREE.Group>()
//   // Load model
//   const { nodes, materials } = useGLTF('/macbook.gltf') as any
//   // Make it float
//   useFrame((state) => {
//     const t = state.clock.getElapsedTime()
//     group.current.rotation.x = THREE.MathUtils.lerp(group.current.rotation.x, Math.cos(t / 2) / 10 + 0.25, 0.1)
//     group.current.rotation.y = THREE.MathUtils.lerp(group.current.rotation.y, Math.sin(t / 4) / 10, 0.1)
//     group.current.rotation.z = THREE.MathUtils.lerp(group.current.rotation.z, Math.sin(t / 4) / 20, 0.1)
//     group.current.position.y = THREE.MathUtils.lerp(group.current.position.y, (-5 + Math.sin(t)) / 5, 0.1)
//   })
//   // The jsx graph was auto-generated by: https://github.com/pmndrs/gltfjsx
//   return (
//     <group ref={group} {...props} dispose={null}>
//       <group rotation-x={-0.425} position={[0, -0.04, 0.41]}>
//         <group position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
//           <mesh material={materials.aluminium} geometry={nodes['Cube008'].geometry} />
//           <mesh material={materials['matte.001']} geometry={nodes['Cube008_1'].geometry} />
//           <mesh geometry={nodes['Cube008_2'].geometry}>
//
//           </mesh>
//         </group>
//       </group>
//       <mesh material={materials.keys} geometry={nodes.keyboard.geometry} position={[1.79, 0, 3.45]} />
//       <group position={[0, -0.1, 3.39]}>
//         <mesh material={materials.aluminium} geometry={nodes['Cube002'].geometry} />
//         <mesh material={materials.trackpad} geometry={nodes['Cube002_1'].geometry} />
//       </group>
//       <mesh material={materials.touchbar} geometry={nodes.touchbar.geometry} position={[0, -0.03, 1.2]} />
//     </group>
//   )
// }
